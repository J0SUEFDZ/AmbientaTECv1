'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _ReactModal = require('./ReactModal');

var _ReactModal2 = _interopRequireDefault(_ReactModal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**!
 * Modal React Component
 * reactjs-modal: https://github.com/reactjs-ui/reactjs-modal
 *
 */
var ReactModalWrap = function (_Component) {
  _inherits(ReactModalWrap, _Component);

  function ReactModalWrap(props) {
    _classCallCheck(this, ReactModalWrap);

    var _this = _possibleConstructorReturn(this, (ReactModalWrap.__proto__ || Object.getPrototypeOf(ReactModalWrap)).call(this, props));

    _this.state = {
      visible: props.visible
    };
    return _this;
  }

  _createClass(ReactModalWrap, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.instanceModal();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('visible' in nextProps) {
        this.setState({
          visible: nextProps.visible
        });
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return Boolean(this.state.visible || nextState.visible);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      this.instanceModal();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.destoryModal();
    }

    // 销毁 Modal

  }, {
    key: 'destoryModal',
    value: function destoryModal() {
      if (this.modalContainer) {
        _reactDom2.default.unmountComponentAtNode(this.modalContainer);
        document.body.removeChild(this.modalContainer);
        this.modalContainer = null;
        this.modalUuid = null;
      }
    }

    //实例化 Modal，如果开始传入的 visible 为 false，则不实例化

  }, {
    key: 'instanceModal',
    value: function instanceModal() {
      if (this.rendered) {
        /**
         * ReactDOM.unstable_renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
         * parentComponent--父组件  nextElement--下一个组件  container--要绑定的dom
         */
        this.modalInstance = _reactDom2.default.unstable_renderSubtreeIntoContainer(this, this.renderModal(), this.renderModalContainer());
      }
    }

    //渲染窗口容器

  }, {
    key: 'renderModalContainer',
    value: function renderModalContainer() {
      if (!this.modalContainer) {
        var container = this.props.container;

        this.modalContainer = document.createElement('div');
        if (container) {
          container.appendChild(this.modalContainer);
        } else {
          document.body.appendChild(this.modalContainer);
        }
      }
      return this.modalContainer;
    }

    //渲染 Modal 窗口

  }, {
    key: 'renderModal',
    value: function renderModal() {
      if (!this.modalUuid) {
        this.modalUuid = 'modal' + ReactModalWrap.modalUuid++;
      }

      var modalProps = _extends({}, this.props, {
        visible: this.state.visible
      });
      // 设置 key 不会重复创建
      return _react2.default.createElement(
        _ReactModal2.default,
        _extends({}, modalProps, { key: this.modalUuid }),
        this.props.children
      );
    }
  }, {
    key: 'render',
    value: function render() {
      // 是否渲染 modal，以下写法表示只渲染一次
      this.rendered = this.rendered || this.state.visible;
      return null;
    }
  }]);

  return ReactModalWrap;
}(_react.Component);

ReactModalWrap.modalUuid = 1;


ReactModalWrap.propTypes = {
  visible: _propTypes2.default.bool, // Modal 窗口是否可见
  children: _propTypes2.default.node,
  container: _propTypes2.default.element //渲染模态窗口容器，默认为 document.body
};

exports.default = ReactModalWrap;