'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _scrollbarWidth = require('perfect-dom/lib/scrollbarWidth');

var _scrollbarWidth2 = _interopRequireDefault(_scrollbarWidth);

var _checkBodyScrollbar = require('perfect-dom/lib/checkBodyScrollbar');

var _checkBodyScrollbar2 = _interopRequireDefault(_checkBodyScrollbar);

var _offset = require('perfect-dom/lib/offset');

var _offset2 = _interopRequireDefault(_offset);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var scrollingEffect = false;
var positionKey = ['left', 'right', 'top', 'bottom'];

function setTransformOrigin(node, value) {
  var style = node.style;

  ['Webkit', 'Moz', 'Ms', 'ms'].forEach(function (prefix) {
    if (style[prefix + 'TransformOrigin'] !== undefined) {
      style[prefix + 'TransformOrigin'] = value;
    }
  });
  style.transformOrigin = value;
}

/**!
 * Modal React Component
 * reactjs-modal: https://github.com/reactjs-ui/reactjs-modal
 *
 */

var ReactModal = function (_Component) {
  _inherits(ReactModal, _Component);

  function ReactModal(props) {
    _classCallCheck(this, ReactModal);

    var _this = _possibleConstructorReturn(this, (ReactModal.__proto__ || Object.getPrototypeOf(ReactModal)).call(this, props));

    _this.onClose = function (e) {
      _this.props.onClose(e);
    };

    _this.onMaskClick = function (e) {
      var _this$props = _this.props,
          closable = _this$props.closable,
          maskClosable = _this$props.maskClosable;

      if (e.target === e.currentTarget && closable && maskClosable) {
        _this.onClose(e);
      }
    };

    _this.onKeyDown = function (e) {
      var _this$props2 = _this.props,
          closable = _this$props2.closable,
          keyboard = _this$props2.keyboard;

      if (closable && keyboard) {
        if (e.keyCode === 27) {
          _this.onClose(e);
        }
      }
    };

    _this.preventTouch = function (event) {
      event.preventDefault();
      event.stopPropagation();
    };

    _this.scrollbarWidth = (0, _scrollbarWidth2.default)();
    return _this;
  }

  _createClass(ReactModal, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.toggleModal({});
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      this.toggleModal(prevProps);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var preventTouchmove = this.props.preventTouchmove;

      if (preventTouchmove) {
        document.body.removeEventListener('touchmove', this.preventTouch, false);
      }
    }

    // 显示或隐藏模态窗口

  }, {
    key: 'toggleModal',
    value: function toggleModal(prevProps) {
      var _this2 = this;

      var _props = this.props,
          visible = _props.visible,
          animationPosition = _props.animationPosition,
          animation = _props.animation,
          maskAnimation = _props.maskAnimation,
          transitionLeaveTimeout = _props.transitionLeaveTimeout;

      if (visible) {
        if (!prevProps.visible) {
          this.refs.modal.focus();
          this.addScrollingEffect();

          var madalNode = this.refs.modal;
          if (animation && animationPosition) {
            var elOffset = (0, _offset2.default)(madalNode);
            setTransformOrigin(madalNode, animationPosition.x - elOffset.left + 'px ' + (animationPosition.y - elOffset.top) + 'px');
          } else {
            setTransformOrigin(madalNode, '');
          }
        }
      } else {
        if (animation || maskAnimation) {
          setTimeout(function () {
            _this2.removeScrollingEffect();
          }, transitionLeaveTimeout);
        } else {
          this.removeScrollingEffect();
        }
      }
    }

    // 隐藏 body 自身的滚动条，同时修改其 padding right

  }, {
    key: 'addScrollingEffect',
    value: function addScrollingEffect() {
      if (scrollingEffect) {
        return;
      }

      scrollingEffect = true;
      var _props2 = this.props,
          prefixCls = _props2.prefixCls,
          preventTouchmove = _props2.preventTouchmove;
      var classList = document.body.classList;

      var htmlClassList = document.documentElement.classList;
      var scrollingClassName = prefixCls + '-open';
      classList.add(scrollingClassName);
      //在 html 上也加上隐藏滚动条样式
      htmlClassList.add(scrollingClassName);

      this.bodyIsOverflowing = (0, _checkBodyScrollbar2.default)();
      if (this.bodyIsOverflowing) {
        this.originalPaddingRight = document.body.style.paddingRight;
        document.body.style.paddingRight = this.scrollbarWidth + 'px';
      }
      if (preventTouchmove) {
        document.body.addEventListener('touchmove', this.preventTouch, false);
      }
    }

    // 恢复 body 原生样式

  }, {
    key: 'removeScrollingEffect',
    value: function removeScrollingEffect() {
      if (scrollingEffect === false) {
        return;
      }
      scrollingEffect = false;

      var _props3 = this.props,
          prefixCls = _props3.prefixCls,
          preventTouchmove = _props3.preventTouchmove,
          hideAllModal = _props3.hideAllModal;

      if (preventTouchmove) {
        document.body.removeEventListener('touchmove', this.preventTouch, false);
      }

      if (hideAllModal) {
        var classList = document.body.classList;

        var htmlClassList = document.documentElement.classList;
        var scrollingClassName = prefixCls + '-open';
        classList.remove(scrollingClassName);
        htmlClassList.remove(scrollingClassName);

        if (this.bodyIsOverflowing) {
          document.body.style.paddingRight = this.originalPaddingRight;
        }
      }
    }

    // 关闭 modal 窗口

  }, {
    key: 'renderMask',
    value: function renderMask(zIndex) {
      var _props4 = this.props,
          mask = _props4.mask,
          prefixCls = _props4.prefixCls,
          visible = _props4.visible,
          className = _props4.className,
          transitionAppearTimeout = _props4.transitionAppearTimeout,
          transitionEnterTimeout = _props4.transitionEnterTimeout,
          transitionLeaveTimeout = _props4.transitionLeaveTimeout;
      var maskAnimation = this.props.maskAnimation;

      if (mask) {
        var maskElement = visible ? _react2.default.createElement('div', { className: prefixCls + '-mask ' + (className || ''),
          style: zIndex ? { zIndex: zIndex } : null }) : null;
        if (maskAnimation) {
          if (typeof maskAnimation === 'boolean') {
            maskAnimation = prefixCls + '-fade';
          }
          return _react2.default.createElement(
            _reactAddonsCssTransitionGroup2.default,
            {
              component: 'div',
              transitionAppear: true,
              transitionName: maskAnimation,
              transitionAppearTimeout: transitionAppearTimeout,
              transitionEnterTimeout: transitionEnterTimeout,
              transitionLeaveTimeout: transitionLeaveTimeout },
            maskElement
          );
        }
        return maskElement;
      }
      return null;
    }
  }, {
    key: 'renderModalContent',
    value: function renderModalContent(zIndex) {
      var _props5 = this.props,
          closable = _props5.closable,
          prefixCls = _props5.prefixCls,
          hideHeader = _props5.hideHeader,
          title = _props5.title,
          footer = _props5.footer,
          style = _props5.style,
          className = _props5.className,
          children = _props5.children,
          visible = _props5.visible,
          headerStyle = _props5.headerStyle,
          bodyStyle = _props5.bodyStyle,
          footerStyle = _props5.footerStyle,
          position = _props5.position,
          transitionAppearTimeout = _props5.transitionAppearTimeout,
          transitionEnterTimeout = _props5.transitionEnterTimeout,
          transitionLeaveTimeout = _props5.transitionLeaveTimeout;


      var closeEl = void 0;
      if (closable) {
        closeEl = _react2.default.createElement(
          'button',
          {
            onClick: this.onClose,
            className: prefixCls + '-close'
          },
          _react2.default.createElement('span', { className: prefixCls + '-close-x' })
        );
      }

      var headerEl = void 0;
      if (!hideHeader) {
        headerEl = _react2.default.createElement(
          'div',
          { className: prefixCls + '-header', style: headerStyle },
          closeEl,
          _react2.default.createElement(
            'div',
            { className: prefixCls + '-title' },
            title
          )
        );
      }

      var footerEl = void 0;
      if (footer) {
        footerEl = _react2.default.createElement(
          'div',
          { className: prefixCls + '-footer', style: footerStyle },
          footer
        );
      }

      var modalStyle = _extends({}, style);
      if (visible) {
        modalStyle.display = null;
      }

      var posCls = '';
      if (position) {
        if (typeof position === 'string') {
          posCls = prefixCls + '-' + position;
        } else if ((typeof position === 'undefined' ? 'undefined' : _typeof(position)) === 'object') {
          modalStyle.position = 'absolute';
          Object.keys(position).forEach(function (item) {
            if (positionKey.indexOf(item) !== -1) {
              modalStyle[item] = position[item];
            }
          });
        }
      }

      var modalElement = visible ? _react2.default.createElement(
        'div',
        { ref: 'modal', tabIndex: '-1', className: prefixCls + ' ' + (className || '') + ' ' + posCls,
          style: zIndex ? { zIndex: zIndex } : null,
          onKeyDown: this.onKeyDown,
          onClick: this.onMaskClick
        },
        _react2.default.createElement(
          'div',
          { style: modalStyle, className: prefixCls + '-dialog' },
          _react2.default.createElement(
            'div',
            { className: prefixCls + '-content' },
            headerEl,
            _react2.default.createElement(
              'div',
              { className: prefixCls + '-body', style: bodyStyle },
              children
            ),
            footerEl
          )
        )
      ) : null;

      var animation = this.props.animation;

      if (animation) {
        if (typeof animation === 'boolean') {
          animation = prefixCls + '-zoom';
        }
        return _react2.default.createElement(
          _reactAddonsCssTransitionGroup2.default,
          {
            component: 'div',
            transitionAppear: true,
            transitionName: animation,
            transitionAppearTimeout: transitionAppearTimeout,
            transitionEnterTimeout: transitionEnterTimeout,
            transitionLeaveTimeout: transitionLeaveTimeout },
          modalElement
        );
      }

      return modalElement;
    }
  }, {
    key: 'render',
    value: function render() {
      var zIndex = this.props.zIndex;

      var maskZIndex = void 0;
      var modalZIndex = void 0;
      if (zIndex !== undefined && zIndex !== null) {
        maskZIndex = zIndex;
        modalZIndex = zIndex + 1;
      }

      return _react2.default.createElement(
        'div',
        null,
        this.renderMask(maskZIndex),
        this.renderModalContent(modalZIndex)
      );
    }
  }]);

  return ReactModal;
}(_react.Component);

ReactModal.propTypes = {
  prefixCls: _propTypes2.default.string, // Modal 窗口 class，默认为 rc-modal
  className: _propTypes2.default.string, //自定义 class 样式
  style: _propTypes2.default.object, // 自定义 style 比如 width 或 height
  headerStyle: _propTypes2.default.object, // 自定义 modal header 的样式
  bodyStyle: _propTypes2.default.object, // 自定义 modal body 的样式，比如 width height 滚动条等
  footerStyle: _propTypes2.default.object, // 自定义 modal footer 的样式，比如 width height 滚动条等
  zIndex: _propTypes2.default.number, // 模态窗口 zIndex
  visible: _propTypes2.default.bool, // Modal 窗口是否可见
  closable: _propTypes2.default.bool, // 是否显示关闭按钮
  onClose: _propTypes2.default.func, // 关闭回调函数
  keyboard: _propTypes2.default.bool, // 按 esc 是否关闭窗口
  mask: _propTypes2.default.bool, // 是否显示遮罩效果
  maskClosable: _propTypes2.default.bool, //设为 true，当点击遮罩时，关闭窗口
  // 模态窗口显示位置，当设为字符串时，支持 top left right bottom center
  // left-top left-bottom right-top right-bottom， 设置对象表示其坐标 {x:number,y:number}
  position: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  animationPosition: _propTypes2.default.object, //基于指定位置渲染动画，格式为： { x: 10,y: 20}
  // 窗体是否有动画效果，如果设为 false，则不启用动画，设为 true，使用默认的动画，字符串表示自定义的动画样式
  animation: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string]),
  //  mask是否有动画效果，如果设为 false，则不启用动画，设为 true，使用默认的动画，字符串表示自定义的动画样式
  maskAnimation: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string]),
  transitionAppearTimeout: _propTypes2.default.number, //动画出现持续时间
  transitionEnterTimeout: _propTypes2.default.number, //动画进入持续时间
  transitionLeaveTimeout: _propTypes2.default.number, //动画离开持续时间
  title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]), //标题
  hideHeader: _propTypes2.default.bool, // 控制是否显示 header
  footer: _propTypes2.default.element, // 底部按钮设置
  children: _propTypes2.default.node, // 窗体内容
  preventTouchmove: _propTypes2.default.bool, //当显示模态窗口时，是否阻止 touchmove 事件
  hideAllModal: _propTypes2.default.bool // 当打开多个模态窗口时，根据该属性来控制是否关闭所有模态窗口
};
ReactModal.defaultProps = {
  prefixCls: 'rc-modal',
  hideHeader: false,
  className: '',
  mask: true,
  closable: true,
  onClose: function onClose() {},
  position: 'center',
  transitionAppearTimeout: 300, // 动画出现持续时间
  transitionEnterTimeout: 300, // 动画进入持续时间
  transitionLeaveTimeout: 300, // 动画离开持续时间
  hideAllModal: true
};
exports.default = ReactModal;